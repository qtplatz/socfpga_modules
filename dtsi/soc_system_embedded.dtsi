/*
 * The MIT License (MIT)
 * Copyright (c) 2017 Intel Corporation
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

#include "soc_system.h"
#include "dt-bindings/interrupt-controller/irq.h"

/*
 * Redefine the macros from soc_system.h into shorter macros and more useful
 * values that we can use directly in the devicetree definition.
 */
#define JTAG_UART_BASE		HPS_0_ARM_A9_0_JTAG_UART_BASE
#define JTAG_UART_SPAN		HPS_0_ARM_A9_0_JTAG_UART_SPAN
#define JTAG_UART_IRQ		(HPS_0_JTAG_UART_IRQ + 72 - 32)

#define SYSID_QSYS_BASE		HPS_0_ARM_A9_0_SYSID_QSYS_BASE
#define SYSID_QSYS_SPAN		HPS_0_ARM_A9_0_SYSID_QSYS_SPAN

#define LED_PIO_BASE		HPS_0_ARM_A9_0_LED_PIO_BASE
#define LED_PIO_SPAN		HPS_0_ARM_A9_0_LED_PIO_SPAN
#define LED_PIO_WIDTH		HPS_0_ARM_A9_0_LED_PIO_DATA_WIDTH

#define DIPSW_PIO_BASE		HPS_0_ARM_A9_0_DIPSW_PIO_BASE
#define DIPSW_PIO_SPAN		HPS_0_ARM_A9_0_DIPSW_PIO_SPAN
#define DIPSW_PIO_IRQ		(HPS_0_DIPSW_PIO_IRQ + 72 - 32)
#define DIPSW_PIO_WIDTH		HPS_0_ARM_A9_0_DIPSW_PIO_DATA_WIDTH

#define BUTTON_PIO_BASE		HPS_0_ARM_A9_0_BUTTON_PIO_BASE
#define BUTTON_PIO_SPAN		HPS_0_ARM_A9_0_BUTTON_PIO_SPAN
#define BUTTON_PIO_IRQ		(HPS_0_BUTTON_PIO_IRQ + 72 - 32)
#define BUTTON_PIO_WIDTH	HPS_0_ARM_A9_0_BUTTON_PIO_DATA_WIDTH

#define ILC_BASE		HPS_0_ARM_A9_0_HPS_0_ARM_GIC_0_BASE // HPS_0_ARM_A9_0_ILC_BASE
#define ILC_SPAN		HPS_0_ARM_A9_0_HPS_0_ARM_GIC_0_SPAN // HPS_0_ARM_A9_0_ILC_SPAN

#define PIO_OUT_BASE            HPS_0_PIO_OUT_BASE
#define PIO_OUT_SPAN            HPS_0_PIO_OUT_SPAN

#define PIO_IN_BASE             HPS_0_PIO_IN_BASE
#define PIO_IN_SPAN             HPS_0_PIO_IN_SPAN
#define PIO_IN_IRQ              HPS_0_PIO_IN_IRQ

/ {
	clocks {
		clk_0: clk_0 {
			compatible = "fixed-clock";
			#clock-cells = <0>;
			clock-frequency = <50000000>;	/* 50.00 MHz */
			clock-output-names = "clk_0-clk";
		}; //end clk_0 (clk_0)
	};

    hps_0_arm_gic_0: intc@fffed000 {
	};

	sopc0: sopc@0 {
		device_type = "soc";
		ranges;
		#address-cells = <1>;
		#size-cells = <1>;
		compatible = "ALTR,avalon", "simple-bus";
		bus-frequency = <0>;

		hps_0_bridges: bridge@c0000000 {
			compatible = "altr,bridge-20.1", "simple-bus";
			reg = <0xc0000000 0x20000000>,
				<0xff200000 0x00200000>;
			reg-names = "axi_h2f", "axi_h2f_lw";
			clocks = <&clk_0 &clk_0>;
			clock-names = "h2f_axi_clock", "h2f_lw_axi_clock";
			#address-cells = <2>;
			#size-cells = <1>;
			ranges = <0x00000000 0x00000000 0xc0000000 0x00010000>,
				<0x00000001 0x00020000 0xff220000 0x00000008>,
				<0x00000001 0x00010000 0xff210000 0x00000008>,
				<0x00000001 0x00010040 0xff210040 0x00000010>,
				<0x00000001 0x00010080 0xff210080 0x00000010>,
				<0x00000001 0x000100c0 0xff2100c0 0x00000010>,
				<0x00000001 0x00001000 0xff201000 0x00000010>,
				<0x00000001 0x00001100 0xff201100 0x00000010>;

			jtag_uart: serial@100020000 {
				compatible = "altr,juart-20.1", "altr,juart-1.0";
				reg = <0x00000001 0x00020000 0x00000008>;
				interrupt-parent = <&hps_0_arm_gic_0>;
				interrupts = <0 42 4>;
				clocks = <&clk_0>;
			}; //end serial@100020000 (jtag_uart)

			sysid_qsys: sysid@100010000 {
				compatible = "altr,sysid-20.1", "altr,sysid-1.0";
				reg = <0x00000001 0x00010000 0x00000008>;
				clocks = <&clk_0>;
				id = <2899645186>;	/* embeddedsw.dts.params.id type NUMBER */
				timestamp = <1627013771>;	/* embeddedsw.dts.params.timestamp type NUMBER */
			}; //end sysid@100010000 (sysid_qsys)

			led_pio: gpio@100010040 {
				compatible = "altr,pio-20.1", "altr,pio-1.0";
				reg = <0x00000001 0x00010040 0x00000010>;
				clocks = <&clk_0>;
				altr,gpio-bank-width = <8>;	/* embeddedsw.dts.params.altr,gpio-bank-width type NUMBER */
				resetvalue = <0>;	/* embeddedsw.dts.params.resetvalue type NUMBER */
				#gpio-cells = <2>;
				gpio-controller;
				label = "led_pio";	/* appended from boardinfo */
				gpios = <480 2>;	/* appended from boardinfo */
			}; //end gpio@100010040 (led_pio)

			dipsw_pio: gpio@100010080 {
				compatible = "altr,pio-20.1", "altr,pio-1.0";
				reg = <0x00000001 0x00010080 0x00000010>;
				interrupt-parent = <&hps_0_arm_gic_0>;
				interrupts = <0 40 1>;
				clocks = <&clk_0>;
				altr,gpio-bank-width = <4>;
				altr,interrupt-type = <3>;
				altr,interrupt_type = <3>;
				edge_type = <2>;
				level_trigger = <0>;
				resetvalue = <0>;
				#gpio-cells = <2>;
				gpio-controller;
				label = "dipsw_pio";
				gpios = <448 4>;
			}; //end gpio@100010080 (dipsw_pio)

			button_pio: gpio@1000100c0 {
				compatible = "altr,pio-20.1", "altr,pio-1.0";
				reg = <0x00000001 0x000100c0 0x00000010>;
				interrupt-parent = <&hps_0_arm_gic_0>;
				interrupts = <0 41 1>;
				clocks = <&clk_0>;
				altr,gpio-bank-width = <4>;
				altr,interrupt-type = <2>;
				altr,interrupt_type = <2>;
				edge_type = <1>;
				level_trigger = <0>;
				resetvalue = <0>;
				#gpio-cells = <2>;
				gpio-controller;
				label = "button_pio";
				gpios = <416 2>;
			}; //end gpio@1000100c0 (button_pio)

			pio_out: gpio@100001000 {
				compatible = "dummy,dummy"; // "altr,pio-20.1", "altr,pio-1.0";
				// compatible = "altr,pio-20.1", "altr,pio-1.0";
				reg = <0x00000001 0x00001000 0x00000010>;
				clocks = <&clk_0>;
				altr,gpio-bank-width = <16>;
				resetvalue = <65535>;
				#gpio-cells = <2>;
				gpio-controller;
			}; //end gpio@100001000 (pio_out)

			pio_in: gpio@100001100 {
				compatible = "dummy,dummy"; // "altr,pio-20.1", "altr,pio-1.0";
				reg = <0x00000001 0x00001100 0x00000010>;
				interrupt-parent = <&hps_0_arm_gic_0>;
				interrupts = <0 43 1>;
				clocks = <&clk_0>;
				altr,gpio-bank-width = <8>;
				altr,interrupt-type = <2>;
				altr,interrupt_type = <2>;
				edge_type = <1>;
				level_trigger = <0>;
				resetvalue = <0>;
				#gpio-cells = <2>;
				gpio-controller;
			}; //end gpio@100001100 (pio_in)
		}; //end bridge@c0000000 (hps_0_bridges)
	}; // sopc@0
}; // /
